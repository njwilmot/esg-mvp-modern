datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model ESGMetric {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  companyName    String
  carbonEmissions Float
  energyUsage    Float
  wasteProduced  Float
}

model Recommendation {
  id       Int      @id @default(autoincrement())
  companyName String
  text     String
  createdAt DateTime @default(now())
}

model Supplier {
  id         Int    @id @default(autoincrement())
  name       String
  esgRating  String?
  verified   Boolean @default(false)
  // Additional fields like certificationDocuments, etc.
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime @default(now())
}
model Job { 
  id             Int      @id @default(autoincrement())
  company        String
  role           String
  neighborhood   String
  description    String
  homePrice      String
  crimeRate      String
  educationScore Int
  createdAt      DateTime @default(now())
}
model Lead {
  id        String   @id @default(uuid())
  name      String
  email     String
  phone     String?
  status    String   @default("new")
  source    String?  // Social Media, Website, etc.
  score     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserSettings {
  userId            String  @id
  emailNotifications Boolean @default(false)
  themeMode         String  @default("light")
}

// NextAuth default schema if using Prisma Adapter
model User {
  id             String          @id @default(cuid())
  name           String?
  email          String?         @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  // Add this line so Prisma knows subscriptions belong to User
  subscriptions  Subscription[]
}


model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Subscription {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  tier      String
  status    String
  createdAt DateTime @default(now())
}

model AuditLog {
  id        String   @id @default(uuid())
  action    String
  timestamp DateTime @default(now())
}

model Workflow {
  id    String         @id @default(uuid())
  name  String
  steps WorkflowStep[]
}

model WorkflowStep {
  id        String @id @default(uuid())
  action    String
  params    String
  workflow  Workflow @relation(fields: [workflowId], references: [id])
  workflowId String
}